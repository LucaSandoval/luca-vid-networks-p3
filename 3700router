#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    relations = {}
    sockets = {}
    ports = {}

    # Keep track of all recieved route announcements
    route_announcments = []
    # Keep track of all routes in our forwarding table
    forwarding_table = []
    # Keep track of all recieved route withdraw messages
    route_withdraws = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                self.process_msg(msg, srcif)          
        return
    
    def process_msg(self, msg, src):
        msg_json = json.loads(msg)
        msg_src = msg_json['src']
        msg_dst = msg_json['dst']
        msg_type = msg_json['type']
        msg_msg = msg_json['msg']
        
        # main logic
        if (msg_type == "update"):
            # save a copy of this route announcement for later
            self.route_announcments.append(msg)
            # update our forwarding table
            self.rebuild_forwarding_table()
            # send copies to neighbors (if applicable)
            rec_neighbor_type = self.relations[msg_src]
            for sock_ip in self.sockets:
                # Don't send the update back the way it came
                if(sock_ip != msg_src):
                    # Decide if we're sending a copy to a given neighbor based on peer/cust/prov relationship
                    if (rec_neighbor_type == "cust") or (((rec_neighbor_type == "prov") or (rec_neighbor_type == "peer")) and (self.relations[sock_ip] == "cust")):
                        # Remove private fields from our message
                        new_msg = {
                            "src" : self.our_addr(sock_ip),
                            "dst" : sock_ip,
                            "type" : msg_type,
                            "msg" :
                            {
                                "network" : msg_msg['network'],
                                "netmask" : msg_msg['netmask'],
                                "ASPath" : [self.asn] + msg_msg['ASPath']
                            }
                        }
                        # Send it over our neighbor
                        self.send(sock_ip, json.dumps(new_msg))
                        
        elif(msg_type == "data"):            
            # Determine which route to forward it to (if any)
            possible_routes = []
            for route in self.forwarding_table:
                route_network = route['network']
                route_netmask = route['netmask']
                if self.ip_in_network(msg_dst, route_network, route_netmask):
                    # This route matches, so its a possibility
                    possible_routes.append(route)
            # If we've found any matches, determine the best one and send it.
            if (len(possible_routes) > 0):
                is_legal = True
                chosen_route = self.pick_best_route(possible_routes)
                # Determine if forwarding is legal
                if ((self.relations[src] == "peer" or self.relations[src] == "prov") and (self.relations[chosen_route['peer']] == "peer" or self.relations[chosen_route['peer']] == "prov")):
                    is_legal = False
                if (is_legal):
                    self.send(chosen_route['peer'], msg)
                else:
                    self.send_no_route(msg_src, src)
            else:
                # Otherwise, there is no route
                self.send_no_route(msg_src, src)
        elif(msg_type == "dump"):
            # Sends table message back the way it came.
            self.send(msg_src, self.send_table(msg_src))
        if msg_type == "withdraw":
            # for each ip address in forwarding table 
            for entry in self.route_announcments:
                entry_json = json.loads(entry)
                for network in msg_msg:
                    if msg_src == entry_json["src"] and network["network"] == entry_json["msg"]["network"] and network["netmask"] == entry_json["msg"]["netmask"]:
                        self.route_announcments.remove(entry)
                        
            # new forwarding table with the updated entries
            self.rebuild_forwarding_table()
            
            # send copies of the route revocation to neighbors
            
            rec_neighbor_type = self.relations[msg_src]
            for sock_ip in self.sockets:
                # Don't send the update back the way it came
                if(sock_ip != msg_src):
                    # Decide if we're sending a copy to a given neighbor based on peer/cust/prov relationship
                    if (rec_neighbor_type == "cust") or (((rec_neighbor_type == "prov") or (rec_neighbor_type == "peer")) and (self.relations[sock_ip] == "cust")):
                        # Remove private fields from our message
                        new_msg = {
                            "src" : self.our_addr(sock_ip),
                            "dst" : sock_ip,
                            "type" : msg_type,
                            "msg" : msg_msg
                            
                        }
                        # Send it over our neighbor
                        self.send(sock_ip, json.dumps(new_msg))            
        return
    
    def pick_best_route(self, route_possibilites):
        # If there's only one option, pick it.
        if (len(route_possibilites) == 1):
            return route_possibilites[0]

        search_pool = route_possibilites
        
        #list to hold the routes tied for the longest prefix
        bestRoutesSoFar = []
        
        for route in search_pool:
            # get the length of the netmask 
            routePrefixLength = self.netmaskLength(route["netmask"])
            
            # if this is the first route in the list set as default best
            if len(bestRoutesSoFar) == 0:
                bestRoutesSoFar.append(route)
            # if we find an equal prefix length add to list
            elif self.netmaskLength(bestRoutesSoFar[0]["netmask"]) == routePrefixLength:
                bestRoutesSoFar.append(route)
                #if we find a higher prefix then empty the list and set new route as only element
            elif self.netmaskLength(bestRoutesSoFar[0]["netmask"]) < routePrefixLength:
                bestRoutesSoFar = [route]
                
        search_pool = bestRoutesSoFar
        #if we end up with one highest prefix match then we are done
        if len(search_pool) == 1:
            return search_pool[0]
        
        #if multiple matches 
        
        # Step 1: Try to find the highest local pref.
        route_dict, ranking = self.sort_routes_by_field('localpref', search_pool)
        # If there is one clear highest, pick it
        if (len(route_dict[ranking[len(ranking) - 1]]) == 1):
            return route_dict[ranking[len(ranking) - 1]][0]
        search_pool = route_dict[ranking[len(ranking) - 1]]
        
        # Step 2: Try to find a single entry with selfOrigin set to true.
        route_dict, ranking = self.sort_routes_by_field('selfOrigin', search_pool)
        # If there is one True, pick it
        if (True in route_dict):
            if (len(route_dict[True]) == 1):
                return route_dict[True][0]
            else:
                search_pool = route_dict[True]

        # Step 3: Try to find shortest AS path.
        route_dict, ranking = self.sort_routes_by_field('ASPath', search_pool)
        # Extra step, sort my ranking by array length.
        if(len(route_dict[ranking[0]]) == 1):
            return route_dict[ranking[0]][0]
        search_pool = route_dict[ranking[0]]

        # Step 4: Try to find the best origin. 
        route_dict, ranking = self.sort_routes_by_field('origin', search_pool)
        # Following IGP > EGP > UNK, we need to do some filtering.
        if ("IGP" in route_dict):
            if(len(route_dict["IGP"]) == 1):
                return route_dict["IGP"][0]
        elif ("EGP" in route_dict):
            if(len(route_dict["EGP"]) == 1):
                return route_dict["EGP"][0]
        elif ("UNK" in route_dict):
            search_pool = route_dict["UNK"]

        # Step 5: Routes are the same in every other way, therefore we simply pick the lowest ip adress.
        route_dict, ranking = self.sort_routes_by_field('peer', search_pool)
        lowest_ip = self.find_lowest_ip(ranking)
        return route_dict[lowest_ip][0]
    
    def sort_routes_by_field(self, field, route_possibilites):
        # Place all routes into a table where the key is the 
        # given field.
        route_dict = {}
        ranking = []
        for route in route_possibilites:
            key = route[field]
            if (isinstance(key, list)):
                key = len(key)
            if key in route_dict:
                route_dict[key].append(route)
            else:
                route_dict[key] = [route]
                ranking.append(key)
        # Sort ranking by key values
        ranking = sorted(ranking)
        return route_dict, ranking

    def netmaskLength(self, netmask):
        netmask_octets = [int(octet) for octet in netmask.split('.')]
        netmask_binary = ''.join(format(octet, '08b') for octet in netmask_octets)
        netmask_len = netmask_binary.count('1')
        
        return netmask_len
    
    def find_lowest_ip(self, ip_addresses):
        # Function to compare two IP addresses and return the lowest one
        def compare_ip_addresses(ip1, ip2):
            octets1 = list(map(int, ip1.split('.')))
            octets2 = list(map(int, ip2.split('.')))
            
            for octet1, octet2 in zip(octets1, octets2):
                if octet1 < octet2:
                    return ip1
                elif octet1 > octet2:
                    return ip2
            
                return ip1 if ip1 < ip2 else ip2

        # Initialize with the first IP address
        lowest_ip = ip_addresses[0]

        # Compare with the rest of the IP addresses
        for ip_address in ip_addresses[1:]:
            lowest_ip = compare_ip_addresses(lowest_ip, ip_address)
        
        return lowest_ip
    
    def canAggregate(self, route1, route2):
        #print(f"Can aggregate {route1}, {route2}?")
        #adjacent numerically,
        net1 = route1["network"]
        net1_octets = [int(octet) for octet in net1.split('.')]
        net1_binary = int(''.join(format(octet, '08b') for octet in net1_octets), 2)
        
        netmask1 = route1["netmask"]
        netmask1_octets = [int(octet) for octet in netmask1.split('.')]
        netmask1_binary = int(''.join(format(octet, '08b') for octet in netmask1_octets), 2)
        
        net2 = route2["network"]
        net2_octets = [int(octet) for octet in net2.split('.')]
        net2_binary = int(''.join(format(octet, '08b') for octet in net2_octets), 2)
        
        netmask2 = route2["netmask"]
        netmask2_octets = [int(octet) for octet in netmask2.split('.')]
        netmask2_binary = int(''.join(format(octet, '08b') for octet in netmask2_octets), 2)
        
        if netmask1_binary != netmask2_binary:
            #print("netmask not equal")
            return False
        
        adjecent = abs(net1_binary & netmask1_binary - net2_binary & netmask2_binary) == 0
        #print(f"adjecent: {adjecent}")
        if adjecent: 
        # forward to the same next-hop router 
            if route1["ASPath"][0] == route2["ASPath"][0]:
        # have the same attributes (e.g., localpref, origin, etc.)
                    return route1["origin"] == route2["origin"] \
                        and route1["localpref"] == route2["localpref"] \
                            and route1["peer"] == route2["peer"]
                            
        return False
    
    def aggregate_routes(self, routes):
        if(len(routes) == 1):
            return routes[0]

        # Start by extracting all route network bianaries
        route_network_bianaries = []
        for route in routes:
            network = route['network']
            bianary = ''.join([bin(int(x)+256)[3:] for x in network.split('.')])
            bianary = str(bianary)
            route_network_bianaries.append(bianary)

        # Determine new network ip & netmask ip
        network_result = ''
        netmask_result = ''
        end_of_netmask = False
        for x in range(32):
            all_the_same = True
            bit = route_network_bianaries[0][x]
            for bi_str in route_network_bianaries:
                if bi_str[x] != bit:
                    all_the_same = False

            if all_the_same:
                network_result += bit
                if end_of_netmask == False: 
                    netmask_result += '1'
                else:
                    netmask_result += '0'
            else:
                end_of_netmask = True
                network_result += '0'
                netmask_result += '0'

        # Convert results back into dotted ip
        network_binary_groups = [network_result[i:i+8] for i in range(0, len(network_result), 8)]
        netmask_binary_groups = [netmask_result[i:i+8] for i in range(0, len(netmask_result), 8)]
        network_decimal = [int(group, 2) for group in network_binary_groups]
        netmask_decimal = [int(group, 2) for group in netmask_binary_groups]
        network_string = '.'.join(map(str, network_decimal))
        netmask_string = '.'.join(map(str, netmask_decimal))

        agg_route = {
            "origin" : routes[0]['origin'],
            "localpref" : routes[0]['localpref'],
            "network" : network_string,
            "ASPath" : routes[0]['ASPath'],
            "netmask" : netmask_string,
            "peer" : routes[0]['peer'],
            "selfOrigin" : routes[0]['selfOrigin']
        }

        return agg_route
    
    def ip_in_network(self, ip, network, netmask):
        # Split the IP address, network address, and netmask into octets
        ip_octets = [int(octet) for octet in ip.split('.')]
        network_octets = [int(octet) for octet in network.split('.')]
        netmask_octets = [int(octet) for octet in netmask.split('.')]
        
        # Convert octets to binary
        ip_binary = int(''.join(format(octet, '08b') for octet in ip_octets), 2)
        network_binary = int(''.join(format(octet, '08b') for octet in network_octets), 2)
        netmask_binary = int(''.join(format(octet, '08b') for octet in netmask_octets), 2)

        # Compare if the result matches the network address
        return (network_binary & netmask_binary) == (ip_binary & netmask_binary)
    
    def send_table(self, dst):
        response = {
            "src":  self.our_addr(dst),        # Example: 72.65.0.1, i.e., your router
            "dst":  dst,   # Example: 72.65.0.2, i.e., the neighboring router
            "type": "table",
            "msg": self.forwarding_table
            }
        return json.dumps(response)
    
    def send_no_route(self, dst_ip, router):
        no_route_msg = {
                "src" : self.our_addr(router),
                "dst" : dst_ip,
                "type" : "no route",
                "msg" : {}
            }
        self.send(router, json.dumps(no_route_msg))
        return

    def rebuild_forwarding_table(self):
        # Clear the old forwarding table
        self.forwarding_table = []
        # Rebuild it from our list
        for entry in self.route_announcments:
            entry_json = json.loads(entry)
            msg_msg = entry_json['msg']
            msg_msg['peer'] = entry_json['src']
            self.forwarding_table.append(msg_msg)
        # Perform aggregration
        
        # list of lists of routes that can be aggregated
        # i.e. [[0,1,3], [4,5]]
        toAggregate = []
        # already set to aggregate
        # i.e [0,1,3,4,5]
        aggregated = []
        
        # new forwarding table of aggregated
        newForwardingTable = []
        for i, route1 in enumerate(self.forwarding_table):
            group = [i]
            for j, route2 in enumerate(self.forwarding_table):
                # dont compare to self or already compared
                if i < j:
                    if j not in aggregated and self.canAggregate(route1, route2):
                        group.append(j)
                        aggregated.append(j)
            if len(group) > 1:
                aggregated.append(i)
                toAggregate.append(group)
            
        # add the aggregated routes to the forwarding table  
        for group in toAggregate:

            aggregatedRoute = self.aggregate_routes([self.forwarding_table[i] for i in group])
            newForwardingTable.append(aggregatedRoute)
        
        #add the old routes that did not need to be aggregated to the table too 
        
        for index, route in enumerate(self.forwarding_table):
            if index not in aggregated:
                #this is a route that was not aggregated with any so we just append it 
                newForwardingTable.append(route)
                
        #set the new forwarding table as out forwarding table to use
        self.forwarding_table = newForwardingTable
        
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()